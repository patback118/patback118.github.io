{"componentChunkName":"component---src-templates-blog-post-js","path":"/extreme-programming-most-and-least-used-practices/","result":{"data":{"markdownRemark":{"fields":{"slug":"/extreme-programming-most-and-least-used-practices/","encrypted":null},"html":"<p>I've recent been going through the textbook <a href=\"https://www.amazon.com/Engineering-Software-Products-Ian-Sommerville/dp/013521064X\"><em>Engineering Software Products</em> by Ian Sommerville</a> and was interested in Sommerville's take on the most and least followed practices of Extreme Programming.</p>\n<p>I want to list 10 Extreme Programming practices (fundamental ones as noted by Sommerville) here and give my take on them.</p>\n<h2>What is Extreme Programming</h2>\n<p>XP (extreme programming) is a term coined by Kent Beck in 1998 to describe his new Agile project management methodology.</p>\n<p>Agile was created to move software development away from the more sequential approach of the waterfall model to a more iterative methodology. The Waterfall model worked well in the older aerospace, building, and military industries, but was tough to do with software.</p>\n<p>This is largely due to software's more dynamic nature. It's hard to predict every requirement prior to development, and without user feedback throughout the process you may ship a product that doesn't meet all the user's needs.</p>\n<p>Agile, a more iterative approach where features would be released every 2-4 weeks (a sprint) was the answer. Extreme programming wasn't like an extreme sport, rather the idea was to push the best practices of the time to \"extreme\" levels to make software development more efficient.</p>\n<h2>The 5 Most Widely Adopted</h2>\n<p>According to Sommerville, these 5 are the most used XP practices.</p>\n<h3>Test-first Development</h3>\n<p>Most developers will know this as TDD (test driven development). The goal is to write your tests before you write any code. When writing tests you provide an input (if needed) and expect an output.</p>\n<p>Sommerville states that these tests clarify the purpose of the code, and that all new code should not break anything that already exists.</p>\n<p>I agree with this and believe that the tests, if written concisely, can explain everything you need to know about the code. Well written code is easy to write tests for, so it forces developers to follow best practices.</p>\n<p>I often find myself writing the initial tests, but sometimes getting wrapped up in the development of the code and not writing the tests needed for full coverage. Luckily modern coverage checks exist but it is a good practice to write the tests so the next developer can more easily make changes.</p>\n<h3>Refactoring</h3>\n<p>Sommerville explains that refactoring should be done as soon as improvements are found.</p>\n<p>Ideally this makes sense but other priorities exist throughout the sprint. Critical security vulnerabilities should be addressed ASAP, but for other refactors it's probably best to save them for a time when feature development has slowed down.</p>\n<h3>Incremental Planning</h3>\n<p>These may also be known as User Stories and you'll generally find these within the Jira ticket you're working on.</p>\n<p>Sommerville mentions these are from customers and they are done by priority and time available. I completely agree that user stories are extremely valuable for communicating user needs to everyone including the developers.</p>\n<p>They typically follow this format in Scrum:</p>\n<blockquote>\n<p>As a &#x3C; type of user >, I want &#x3C; some goal > so that &#x3C; some reason >.</p>\n</blockquote>\n<h3>Continuous Integration</h3>\n<p>The practice of Continuous Integration is one of the most adopted practices by a company looking to be Agile.</p>\n<p>Work is integrated to production when the task is complete. All tests should pass and the code should be reviewed.</p>\n<p>Modern CI/CD tools have allowed this process to be much easier than it was in the past.</p>\n<h3>Small Releases</h3>\n<p>Small Releases are another core concept for all agile companies I've worked.</p>\n<p>The idea here is to release the MVP (minimally viable product) and then release frequent feature updates every sprint cycle (2-4 weeks).</p>\n<p>Small releases allow for faster feedback.</p>\n<h2>The 5 Least Adopted</h2>\n<p>Sommerville notes that most companies don't follow one Agile methodology over another, but rather pick and choose from various methodologies (Scrum, XP, etc).</p>\n<p>In being picky, most companies are less inclined to do the following 5 practices (though I believe some are worth the effort).</p>\n<h3>Simple Design</h3>\n<p>Simple design can also be summed up by the acronym YAGNI (you aren't gonna need it).</p>\n<p>Sommerville notes that according to XP, this means that developers should only code the requested features. His retort is that extra, potentially complex code is often necessary as users aren't fully aware of the system that powers the product.</p>\n<p>I agree that user stories alone don't guide technical choices, but I think the philosophy of simple design / YAGNI is one that influences all areas of software engineering. Whether its code, database, or architecture any means to simplify the design but keep the functionality will be appreciated by everyone on the team.</p>\n<h3>On-site customer</h3>\n<p>This concept seems to be a product of it's time, where teams greatly benefited by having a customer / user on site to quickly provide feedback on new features.</p>\n<p>Sommerville claims this is time consuming and may not be worth the customers time.</p>\n<p>With the wide range of available tools to aid communication this should be less of an issue now. Being able to receive direct feedback via a Zoom call or async via a survey makes having an on site customer unnecessary. Not to mention the data gained from tracking user interactions can largely automate the feedback process. </p>\n<h3>Sustainable pace</h3>\n<p>When working sequentially (waterfall), the pace can be absolutely abysmal as hard deadlines approach and extra necessary work was not accounted for or addressed. This forces teams to work overtime to meet demands, and typically leads to burnout and turnover. Agile's practice of a sustainable pace was created to allow developers to keep producing quality products without burnout.</p>\n<p>Sommerville states that the practice of sustainable pace is nice on paper, but most of the time it's tough to convince managers to adjust expectations. This typically has not been the case with me, and if this happens there could be a breakdown of communication happening between the team and management. Senior members should communicate during reviews and even daily standups to address any roadblocks to development and release.</p>\n<p>I believe sustainable pace is attainable if all team members truthfully work hard (during work hours) and communicate issues early to allow managers to adjust and compromise expectations throughout the sprint. Honest and thoughtful communication are key components to the Agile process, and the sprint reviews should show if the pace needs to be adjusted to maximize efficiency while avoiding burnout.</p>\n<h3>Pair programming</h3>\n<p>Pair programming is when two developers work together to finish a feature or knowledge share to get both developers on the same page. Typically one developer will \"drive\" the code development, while the other observes and offers suggestions throughout. This is even easier now than ever with the co-development tools available.</p>\n<p>Sommerville mentions there isn't much evidence to suggest that pair programming is worth it, and that managers generally don't like the idea of two workers working on the same thing.</p>\n<p>I disagree, as knowledge sharing within and between teams is a big boon to any company. At university, engineering students would gather in meeting rooms to work on homework together, with the classmate that \"got\" the assignment sharing their understanding of the work, in turn learning more from the group as they finished it together.</p>\n<p>There are many setups for pair programming, one being a senior member showing a more junior member how to do something, or a specialist helping to describe a solution to a general team member, or just one developer who \"gets\" the work showing another developer how. I can't tell how many times I've had eureka moments doing pair programming, and the knowledge gained is invaluable.</p>\n<p>That said, not every project needs to be paired, nor does the entirety of the feature development need to be paired. It should be a tool to help a developer get past a road block and allow the team to fulfill the sprint goal.</p>\n<h3>Collective ownership</h3>\n<p>It's amazing how this practice came to influence how we share completed source code as seen in open source. It's a great concept whether within the team, an organization, or the open source community to allow more eyes on the code that in turn can help resolve issues or suggest code improvements.</p>\n<p>Sommerville mentions that this practice doesn't work for many developers as they may not want to share completed work. I can partially understand this as success metrics are necessary for individual growth within the company, but with modern code tracking its pretty simple to track via code blame.</p>\n<p>Sommerville also suggests that specialists and part-timers come and go, so their contracts may state ownership over certain commits. This could avoided by more careful contracts or suggesting specialists develop a separate module entirely that they can maintain (not best idea though).</p>\n<p>For me, collective ownership is a good thing as long as organizations track and recognize contributions of individuals as well as teams. I think for many organizations they should close source their code from the public, but leave it open to those within the organization to allow a greater understanding of the code. Code sharing and company wide code style guides can help streamline development.</p>\n<h2>Conclusion</h2>\n<p>The creators of Extreme Programming believed that these practices were conceived as being holistic and essential. In an ideal situation they should be, and even if an organization or team may sometimes sway away from these ideals, they can always fall back on them throughout the sprint cycle.</p>\n<p>Sommerville concludes in mentioning that developers aren't managers, and that business needs can't be left to developers. I agree, but the opposite should be true as well. XP and other agile methodologies seek to give software engineers and the greater team a framework to present technical hurdles to stakeholders, while remaining professional and flexible throughout the process.</p>\n<p>-Patrick</p>","frontmatter":{"title":"Extreme Programming - Most and Least Used Practices","date":"04 September, 2023","tags":["Agile","General","Best Practices","Software Engineering"]}}},"pageContext":{"slug":"/extreme-programming-most-and-least-used-practices/"}},"staticQueryHashes":["3631884714"]}