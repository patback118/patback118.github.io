{"componentChunkName":"component---src-templates-blog-post-js","path":"/gatsby-site-on-gh-pages/","result":{"data":{"markdownRemark":{"fields":{"slug":"/gatsby-site-on-gh-pages/","encrypted":null},"html":"<p>Prior to learning about Github Pages, I've always hosted my personal site on my own server instance. This started on a Host Gator shared instance and later on my Digital Ocean droplet.</p>\n<p>I eventually realized that the cost of these personal server instances weren't worth it for me anymore. I ran most of my personal scripts from my local PC and all other work related scripts were running from work servers. So it was time to shut them down.</p>\n<p>That said, I didn't want to lose the public presence of mine or my wife's personal sites.</p>\n<h2>Enter Github Pages</h2>\n<p>As of 2022, there are a number of places you can host a personal site for free. For my needs, I found <a href=\"https://pages.github.com/\">Github Pages</a> to be the best fit.</p>\n<p>Github Pages has a native integration with the static site generator <a href=\"https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll\">Jekyll</a>, but I wanted to use <a href=\"https://www.gatsbyjs.com/\">Gatsby JS</a> due to it being built with Node JS and React.</p>\n<h2>Finding a Gatsby Theme</h2>\n<p>For my purposes, I just wanted a simple theme where I could post code related content. I ended up really liking this theme <a href=\"https://github.com/email2vimalraj/gatsby-starter-tech-blog\">Gatsby-Starter-Tech-Blog</a>. After cloning the theme to my local, I ran the following to get it setup for develop purposes from within the project folder.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install\ngatsby develop</code></pre></div>\n<blockquote>\n<p>Note, I recommend setting the <code class=\"language-text\">gatsby develop</code> script as an npm run command in your package.json as well.</p>\n</blockquote>\n<p>After modifying the React components to my liking, (mainly adding personal links, etc) I then moved on to setting up a repo for my Github Pages site.</p>\n<h2>Setting up the Github Pages repo</h2>\n<p>If you have a personal Github account, you're allowed to open a Pages site with the same name as your account. You can also use a custom domain, but for my case I was happy to have my account as <code class=\"language-text\">username.github.io</code>.</p>\n<p>I recommend following along with the <a href=\"https://docs.github.com/en/pages/quickstart\">Quickstart guide</a> to get setup, but the general idea is as follows:</p>\n<ul>\n<li>Sign into your personal Github account.</li>\n<li>Create a repo in this fashion: <code class=\"language-text\">username.github.io</code></li>\n<li>Create a branch called <code class=\"language-text\">gh-pages</code></li>\n<li>Within the repo's settings go to the <em>Pages</em> tab</li>\n<li>Set the source branch to <code class=\"language-text\">gh-pages</code></li>\n<li>Set the folder to <code class=\"language-text\">(root)</code></li>\n<li>Be sure <code class=\"language-text\">Enforce HTTPS</code> is checked</li>\n</ul>\n<p>At this point, your Github Pages repo is ready to go!</p>\n<h2>Defining a backend in a static site</h2>\n<p>As a long time Wordpress user, the typical setup I'm fond of is one where the CMS (drafts, hidden content, code) lives separately from the public site.</p>\n<p>This separation of concerns makes it easier to track changes between what was done in the Node / React code and what is compiled to the front end as static HTML / CSS / JS.</p>\n<p>For my case I like to set up a private repo where the uncompiled Gatsby JS code lives, that will compile on my local PC and push the static <code class=\"language-text\">public</code> content to my Github Pages repo.</p>\n<p>To do so, I open a new private repo and clone it onto my local. I add the initial commit of the Gatsby theme from earlier and push that to the new private repo. Now all changes done to the content and code here are tracked in that private repo.</p>\n<h2>Structuring your public and private repos</h2>\n<p>The next step is on the command line from within your local Gatsby private repo's directory.</p>\n<p>Do a git clone of your Github pages repo from within your local Gatsby directory like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git clone git@github.com:username/username.github.io.git</code></pre></div>\n<p>This will make your local private repos directory look like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- node_modules/\n- public/\n- src/\n- username.github.io/\n- .gitignore\n- gatsby-config.js\n- gatsby-node.js\n- package-lock.json\n- package.json\n- README.md</code></pre></div>\n<p><em>Note, your directory may not be exactly as shown above</em></p>\n<p>Next you'll want to go into your <code class=\"language-text\">.gitignore</code> file and set the following rule:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">username.github.io/</code></pre></div>\n<p>This prevents your private Git repo from tracking the public site as well.</p>\n<h2>Installing gh-pages node package</h2>\n<p>Now from within your private repo, change directories to your public repo and install the npm package <code class=\"language-text\">gh-pages</code>. Here's are the commands:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd username.github.io\nnpm i gh-pages</code></pre></div>\n<p>For easy run purposes, define the following in the new package.json file in your public Github pages repo:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\"scripts\": {\n    \"deploy-ghp\": \"gh-pages -d public\"\n}</code></pre></div>\n<p>Now change directories back to your private repo with a quick </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd ..</code></pre></div>\n<h2>Pushing content to your public GH pages</h2>\n<p>It's finally time to go live!</p>\n<p>This part will play out as follows:</p>\n<ul>\n<li>Remove the public/ folders that may exist in the both the local private repo and public repo directory</li>\n<li>Build the public theme with <code class=\"language-text\">gatsby build</code></li>\n<li>Copy the new public/ folder to the local public repo</li>\n<li>Run <code class=\"language-text\">gh-pages</code> from within the local public repo which will send the static site to your <code class=\"language-text\">gh-pages</code> branch</li>\n</ul>\n<p>If you've been following along up to this point, the following npm run script can be set in your package.json (within the private repo) to build and send to your Github Pages site (be sure to replace <em>username</em> with your Github username):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\"ghp-build\": \"rm -rf public/ &amp;&amp; rm -rf username.github.io/public/ &amp;&amp; gatsby build &amp;&amp; cp -r public/ username.github.io &amp;&amp; cd username.github.io &amp;&amp; npm run deploy-ghp\"</code></pre></div>\n<p>If all the steps work, you should see your command line output with something like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">success onPostBuild - 0.074s\ninfo Done building in 20.410260638 sec\n\n\n> @ deploy-ghp /home/user/site-private-repo/username.github.io\n> gh-pages -d public\n\nPublished</code></pre></div>\n<p><em>Note, errors may occur during the build or gh-pages push, so be sure to run the commands separately to properly debug using the command line output</em></p>\n<h2>Conclusion</h2>\n<p>I hope this setup works for your purposes and helps to get you started with Gatsby and Github Pages.</p>\n<p>In some ways, this process mirrors what you may see in a CI/CD setup on something like Circle CI or Github Actions, but since this is for an individual it's nice to remove the unnecessary complexity and run the scripts from your local PC.</p>\n<p>-Patrick</p>","frontmatter":{"title":"Gatsby Site on Github Pages","date":"05 January, 2022","tags":["Gatsby","General","Github-Pages","Node-Js","Bash"]}}},"pageContext":{"slug":"/gatsby-site-on-gh-pages/"}},"staticQueryHashes":["3631884714"]}